<script is:inline>
const SOUND_TYPES = {
  CLICK: 'tap',
  TYPING: 'type',
}

const CLICK_TARGETS = [
  '#language-switcher',
  '#theme-toggle-button',
  // '#back-button',
  // '#toc-desktop-icon',
  // '.heading-anchor-link',
  // '.code-copy-button',
]

const TYPING_TARGETS = [
  '#wl-nick',
  '#wl-mail',
  '#wl-link',
  '#wl-edit',
]

const IGNORED_KEYS = [
  'Shift',
  'Control',
  'Alt',
  'Meta',
  'Tab',
  'Escape',
  'CapsLock',
]

const CLICK_SELECTOR = CLICK_TARGETS.join(',')
const TYPING_SELECTOR = TYPING_TARGETS.join(',')

class SoundEffectManager {
  constructor() {
    this.audioContext = null
    this.audioBuffers = new Map()
    this.isReady = false
    this.isInitializing = false
  }

  // Initialize audio context and preload sound files
  async initialize() {
    if (this.isReady || this.isInitializing) {
      return
    }

    this.isInitializing = true
    try {
      this.audioContext = new (window.AudioContext || window.webkitAudioContext)()
      await this.preloadAllSounds()
      this.isReady = true
    }
    catch (error) {
      console.warn('Audio initialization failed:', error)
    }
    finally {
      this.isInitializing = false
    }
  }

  // Preload all sound variants
  async preloadAllSounds() {
    const soundTypes = Object.values(SOUND_TYPES)
    const allPromises = soundTypes.flatMap(type =>
      Array.from({ length: 5 }, (_, i) =>
        this.loadSound(`${type}_0${i + 1}`, `/sounds/${type}_0${i + 1}.wav`)),
    )

    await Promise.allSettled(allPromises)
  }

  // Load and cache a sound file
  async loadSound(name, url) {
    try {
      const response = await fetch(url)
      const arrayBuffer = await response.arrayBuffer()
      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer)
      this.audioBuffers.set(name, audioBuffer)
    }
    catch (error) {
      console.warn(`Failed to load ${name}:`, error)
    }
  }

  // Play a random sound of the specified type
  async playSound(soundType) {
    if (!this.isReady && !this.isInitializing) {
      await this.initialize()
    }

    if (!this.isReady || !this.audioContext || this.audioBuffers.size === 0) {
      return
    }

    try {
      // Resume audio context if suspended
      if (this.audioContext.state === 'suspended') {
        await this.audioContext.resume()
      }

      // Find matching sound buffers
      const matchingBuffers = Array.from(this.audioBuffers.entries())
        .filter(([name]) => name.startsWith(soundType))
        .map(([, buffer]) => buffer)

      if (matchingBuffers.length === 0) {
        return
      }

      // Select random sound
      const randomIndex = Math.floor(Math.random() * matchingBuffers.length)
      const audioBuffer = matchingBuffers[randomIndex]

      // Create and configure audio nodes
      const source = this.audioContext.createBufferSource()
      source.buffer = audioBuffer
      const gainNode = this.audioContext.createGain()
      gainNode.gain.value = soundType === SOUND_TYPES.TYPING ? 0.4 : 0.8 // Volume control

      // Connect and play
      source.connect(gainNode)
      gainNode.connect(this.audioContext.destination)
      source.start(0)
    }
    catch (error) {
      console.warn('Playback failed:', error)
    }
  }
}

const soundManager = new SoundEffectManager()

// Handle click events on interactive elements
function handleGlobalClick(event) {
  const clickTarget = event.target.closest(CLICK_SELECTOR)
  if (clickTarget) {
    soundManager.playSound(SOUND_TYPES.CLICK)
  }
}

// Handle keyboard events for typing sounds
function handleGlobalKeydown(event) {
  if (!event.target.closest(TYPING_SELECTOR)
    || event.ctrlKey || event.altKey || event.metaKey
    || IGNORED_KEYS.includes(event.key)) {
    return
  }

  soundManager.playSound(SOUND_TYPES.TYPING)
}

function setupSoundSystem() {
  // Disable sounds on mobile devices
  if (window.matchMedia('(max-width: 1023px)').matches) {
    return
  }

  // Reset event listeners to avoid duplicates
  document.removeEventListener('click', handleGlobalClick)
  document.removeEventListener('keydown', handleGlobalKeydown)
  document.addEventListener('click', handleGlobalClick)
  document.addEventListener('keydown', handleGlobalKeydown)
}

setupSoundSystem()
document.addEventListener('astro:page-load', setupSoundSystem)
</script>
