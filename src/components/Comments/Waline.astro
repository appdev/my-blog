---
import { defaultLocale, themeConfig } from '@/config'
import { walineLocaleMap } from '@/i18n/config'

const {
  waline: {
    serverURL = '',
    emoji = [],
    search = false,
    imageUploader = false,
  } = {},
} = themeConfig.comment ?? {}
---

<div
  id="waline"
  class="mt-16"
></div>

<!-- Waline Script >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> -->
<script
  is:inline
  define:vars={{
    serverURL,
    emoji,
    search,
    imageUploader,
    walineLocaleMap,
    defaultLocale,
  }}
  type="module"
>
import { init } from '/vendors/waline/waline.js'

function setupWaline() {
  const currentPath = window.location.pathname
  const pathLang = Object.keys(walineLocaleMap).find(code =>
    currentPath.startsWith(`/${code}/`),
  )
  const lang = pathLang ?? defaultLocale
  const currentWalineLang = walineLocaleMap[lang]

  init({
    el: '#waline',
    serverURL,
    path: window.location.pathname.replace(/^\/([a-z]{2}(-[a-z]{2})?)\//, '/'), // Share comments on posts in different languages
    lang: currentWalineLang,
    emoji,
    dark: 'html.dark',
    requiredMeta: ['nick', 'mail'],
    highlighter: false,
    texRenderer: false,
    imageUploader,
    search,
    noCopyright: true,
    reaction: [],
  })
}

// Create an intersection observer to lazy load Waline comments when the container enters viewport
function lazySetupWaline() {
  const walineContainer = document.getElementById('waline')
  if (!walineContainer) {
    return
  }

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        setupWaline()
        observer.unobserve(entry.target)
      }
    })
  }, { rootMargin: '200px' })

  observer.observe(walineContainer)
}

lazySetupWaline()
document.addEventListener('astro:page-load', lazySetupWaline)
</script>

<!-- Custom CSS Styles >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> -->
<style is:global>
#waline .wl-login-info {
  --at-apply: 'mr-3 mt-0'
}
#waline .wl-avatar {
  --at-apply: 'border-none'
}
#waline .wl-logout-btn {
  --at-apply: 'z-99'
}
#waline .wl-login-nick:not(:has(img)) {
  --at-apply: 'mt-1.4 leading-3.6';
}
#waline .wl-panel {
  --at-apply: 'm-0 border-secondary/25 rounded-lg bg-transparent'
}
#waline .wl-header {
  --at-apply: 'p-0';
}
#waline .wl-header-item {
  --at-apply: 'border-b border-primary/25 border-solid';
}
#waline .wl-header label {
  --at-apply: 'text-3';
}
#waline .wl-header input {
  --at-apply: 'text-2.8';
}
#waline .wl-card,
#waline .wl-header.item3 {
  --at-apply: 'border-b-0';
}
#waline .wl-card .wl-quote {
  --at-apply: 'mt-4 border-is-none';
}
#waline .wl-editor {
  --at-apply: 'min-h-24';
}
#waline .wl-editor::placeholder {
  --at-apply: 'c-primary/25';
}
#waline .wl-footer {
  --at-apply: 'm-2';
}
#waline .wl-text-number,
#waline .wl-action[title="Markdown Guide"],
#waline .wl-sort,
#waline .wl-gallery::-webkit-scrollbar {
  --at-apply: 'hidden';
}
#waline .wl-emoji-popup {
  --at-apply: 'start-0 max-w-532px border-secondary/25';
}
#waline .wl-emoji-popup .wl-tab-wrapper {
  scrollbar-width: thin;
}
#waline .wl-gif-popup {
  --at-apply: 'border-secondary/25';
}
#waline .wl-gif-popup input {
  --at-apply: 'border-secondary/25 bg-background';
}
#waline .wl-gif-popup input::placeholder {
  --at-apply: 'text-3.5 c-secondary/30';
}
#waline .wl-gallery {
  --at-apply: 'scrollbar-hidden';
}
#waline .wl-meta-head {
  --at-apply: 'px-0 pb-2 pt-3';
}
#waline .wl-card-item {
  --at-apply: 'px-0';
}
#waline .wl-user-avatar {
  --at-apply: 'mt-1';
}
#waline .wl-content p {
  --at-apply: 'text-3.5 leading-6';
}
#waline .wl-time {
  --at-apply: 'c-primary/75';
}
#waline .wl-edit,
#waline .wl-delete {
  --at-apply: 'mr-0.4';
}
#waline .wl-like {
  --at-apply: 'mr-1.2';
}
</style>

<!-- Official CSS Variables >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> -->
<style>
#waline {
  /* Regular Colors */
  --waline-white: oklch(var(--un-preset-theme-colors-background));
  --waline-light-grey: oklch(var(--un-preset-theme-colors-primary) / 0.25);
  --waline-dark-grey: oklch(var(--un-preset-theme-colors-secondary));

  /* Theme Colors */
  --waline-theme-color: oklch(var(--un-preset-theme-colors-primary));
  --waline-active-color: oklch(var(--un-preset-theme-colors-primary));

  /* Layout Colors */
  --waline-color: oklch(var(--un-preset-theme-colors-secondary));
  --waline-bg-color: oklch(var(--un-preset-theme-colors-background));
  --waline-bg-color-light: oklch(var(--un-preset-theme-colors-background));
  --waline-bg-color-hover: oklch(var(--un-preset-theme-colors-background));
  --waline-border-color: oklch(var(--un-preset-theme-colors-primary) / 0.25);
  --waline-disable-bg-color: oklch(var(--un-preset-theme-colors-secondary) / 0.05);
  --waline-disable-color: oklch(var(--un-preset-theme-colors-primary));

  /* Special Colors */
  --waline-bq-color: oklch(var(--un-preset-theme-colors-primary) / 0.25);

  /* Information */
  --waline-info-bg-color: oklch(var(--un-preset-theme-colors-background));
  --waline-info-color: oklch(var(--un-preset-theme-colors-primary) / 0.25);

  /* Rendering Options */
  --waline-avatar-radius: 0.5rem;
}
</style>
